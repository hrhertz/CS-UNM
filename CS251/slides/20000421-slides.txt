QUESTIONS

LAST TIME:
 - Trees II
		
TODAY:		
 - Trees III	     
 - Random numbers    
 - Program 3 return  

ADMINISTRIVIA:  - Ackley office hours end 4PM today!
              	- TurnInTemplate available tonight
	     
HOMEWORK:  PC++P Ch 24, 20
   Program 4 DUE MON APR 24 1PM - UNDER 72 HOURS
     One known bug in spec 1.0: CharMain should say Dequer<char>
						 

    LOTS OF MIPS BUT NO I/O Used to describe a person who is
 technically brilliant but can't seem to communicate with human
 beings effectively. Technically it describes a machine that has
lots of processing power but is bottlenecked on input-output (in
  1991, the IBM Rios, a.k.a. RS/6000, was a notorious example).

PROGRAM 3 GRADE BASIS
 Grade based on `effective level' and style/code read.
  Effective level is basically the highest level at which      
  your code tested successfully.  Specifically:		       
  (1) the testing results on TBN			       
  (2) the testing results on TBN2. (1) is weighted more than  
      (2) but both count.      	   			       
  (3) the `effective level' can be raised *somewhat* based on  
      the code read---e.g., if the code only tested to level 3 
      but there was only a tiny bug preventing it from testing 
      to level 5, the effective level may be raised to 4, etc. 
+-----------------------+	   			       
|Effective Grade Range  |
|  Level   min-mid-max  | Extra credit levels
|    6     84  95 100 	|+------+----------+----------+----------+
|    5     76  87  92 	||levels|total     |tiny      |real bugs,|
|    4     68  79  84 	||imple-|ultimate  |bug(s) or |believable|
|    3     60  71  76 	||mented|perfection|inelegance|big effort|
|    2     55  65  69 	||7     | +5       |+2-3      |+0-1      |
|    1     45  55  59 	||7&8   | +15      |+8-12     |+2-4      |
|    0     35  45  49	||7&8&9 | +30      |+18-24    |+5-8      |
|    n      0  20  39	|+---------------------------------------+
+-----------------------+
 Will have final average data on Monday,  high 70's-low 80's
BINARY SEARCH TREES

                         12
		       	/  \
		       7    19
		      /	\   / \
		     2 	 9 14  33 


For all nodes:
   value is > everything in its left subtree
   value is < everything in its right subtree    

                         12
		       	/  \
		       7    19
		      /	\   / \
       	       	     2 	 9 11  33 

     So THIS is not a binary search tree




BINARY SEARCH TREES - Insertion

To insert 'i' in 'tree'
 (1) Compare i to tree->value;
 (2) If ==, done
 (3) If i<tree->value
     (3.1) If tree->left exists then insert 'i' in tree->left
     (3.2) Otherwise tree->left = new Tree(i,NULL,NULL)
 (4) If i>tree->value
     (4.1) If tree->right exists then insert 'i' in tree->right
     (4.2) Otherwise tree->right = new Tree(i,NULL,NULL)
    		  





		    		      		





		    		    
BINARY SEARCH TREES - Insertion

#include <iomanip.h>          /* for setw */
struct Tree {	     
  int label;   	       	       	       	
  Tree * left, * right;
  Tree(int num,Tree*l,Tree*r) { label = num; left = l; right = r;}
  void Insert(int n) {
    if (n<label) {
      if (!left) left = new Tree(n,NULL,NULL);
      else left->Insert(n);
    } else if (n> label) {
      if (!right) right = new Tree(n,NULL,NULL);
      else right->Insert(n);
    }
  }
  void Print(int depth) { // INORDER traversal puts root in middle
    if (left) left->Print(depth+1);		
    cout << setw(depth) << setfill('.') << ""; // dots==depth..
    cout << label << ' ' << !!left << !!right << endl;
    if (right) right->Print(depth+1);		
  }						
};		     				
						
BINARY SEARCH TREES - Insertion			
//Rt4.C						
int main() {	     
  int num;
  cin >> num;
  if (cin) {
    Tree * root = new Tree(num,NULL,NULL);
    while (1) {
      cin >> num;
      if (!cin) break;
      root->Insert(num);
      root->Print(0);
    }
  }
  return 0;
} 	   








BINARY SEARCH TREES - Insertion			
//Rt4.C						
int main() {	     
  int num;
  cin >> num;
  if (cin) {
    Tree * root = new Tree(num,NULL,NULL);
    while (1) {
      cin >> num;
      if (!cin) break;
      root->Insert(num);
      root->Print(0);
    }
  }
  return 0;
} 	   

 - There's no guarantee a binary search tree will be 
   `well-shaped' at any given point.
				    
 - It depends on what numbers are inserted in what order.

 - What if we use `random numbers'?

SIDEBAR: RANDOM NUMBERS

//RN1.C
#include <stdlib.h>       /* for s/rand() */
#include <iostream.h>
int main() {	     
  for (int i = 0; i<10; ++i) cout << rand() << ' ';  
  cout << endl;	      
  return 0;
}














SIDEBAR: RANDOM NUMBERS

//RN1.C
#include <stdlib.h>       /* for s/rand() */
#include <iostream.h>
int main() {	     
  for (int i = 0; i<10; ++i) cout << rand() << ' ';  
  cout << endl;	      
  return 0;
}


% g++ -Wall -pedantic RN1.C -o foo
% 










SIDEBAR: RANDOM NUMBERS

//RN1.C
#include <stdlib.h>       /* for s/rand() */
#include <iostream.h>
int main() {	     
  for (int i = 0; i<10; ++i) cout << rand() << ' ';  
  cout << endl;	      
  return 0;
}


% g++ -Wall -pedantic RN1.C -o foo
% ./foo
1804289383 846930886 1681692777 1714636915 1957747793 424238335 7\
19885386 1649760492 596516649 1189641421 
% 







SIDEBAR: RANDOM NUMBERS

//RN2.C
#include <stdlib.h>       /* for s/rand() */
#include <iostream.h>
int main() {	     
  for (int i = 0; i<10; ++i) cout << rand()%100 << ' ';  
  cout << endl;	      
  return 0;
}














SIDEBAR: RANDOM NUMBERS

//RN2.C
#include <stdlib.h>       /* for s/rand() */
#include <iostream.h>
int main() {	     
  for (int i = 0; i<10; ++i) cout << rand()%100 << ' ';  
  cout << endl;	      
  return 0;
}


% g++ -Wall -pedantic RN2.C -o foo
% ./foo
83 86 77 15 93 35 86 92 49 21 
% 








SIDEBAR: RANDOM NUMBERS

//RN2.C
#include <stdlib.h>       /* for s/rand() */
#include <iostream.h>
int main() {	     
  for (int i = 0; i<10; ++i) cout << rand()%100 << ' ';  
  cout << endl;	      
  return 0;
}


% g++ -Wall -pedantic RN2.C -o foo
% ./foo
83 86 77 15 93 35 86 92 49 21 
% ./foo     
83 86 77 15 93 35 86 92 49 21 
% 






SIDEBAR: RANDOM NUMBERS

//RN2.C
#include <stdlib.h>       /* for s/rand() */
#include <iostream.h>
int main() {	     
  for (int i = 0; i<10; ++i) cout << rand()%100 << ' ';  
  cout << endl;	      
  return 0;
}


% g++ -Wall -pedantic RN2.C -o foo
% ./foo
83 86 77 15 93 35 86 92 49 21 
% ./foo     
83 86 77 15 93 35 86 92 49 21 
% ./foo
83 86 77 15 93 35 86 92 49 21 
% ./foo
83 86 77 15 93 35 86 92 49 21 
% 


SIDEBAR: PSEUDO-RANDOM NUMBERS

//RN2.C
#include <stdlib.h>       /* for s/rand() */
#include <iostream.h>
int main() {	     
  for (int i = 0; i<10; ++i) cout << rand()%100 << ' ';  
  cout << endl;	      
  return 0;
}


% g++ -Wall -pedantic RN2.C -o foo
% ./foo
83 86 77 15 93 35 86 92 49 21 
% ./foo     
83 86 77 15 93 35 86 92 49 21 
% ./foo
83 86 77 15 93 35 86 92 49 21 
% ./foo
83 86 77 15 93 35 86 92 49 21 
% 


SIDEBAR: PSEUDO-RANDOM NUMBERS

//RN3.C
#include <stdlib.h>       /* for s/rand() */
#include <iostream.h>
int main() {	     
  int seed;
  cin >> seed;   // Read in a `seed' value
  srand(seed);   // Initialize the pseudo-random number generator
  for (int i = 0; i<10; ++i) cout << rand()%100 << ' ';  
  cout << endl;	      
  return 0;
}











SIDEBAR: PSEUDO-RANDOM NUMBERS

//RN4.C
#include <stdlib.h>       /* for s/rand() */
#include <time.h>         /* for time() */
#include <iostream.h>
int main() {	     
  int seed = time(0); // Get number of seconds since 1970
  srand(seed); 	      // Use that as the seed for the PRNG
  for (int i = 0; i<10; ++i) cout << rand()%100 << ' ';  
  cout << endl;	      
  return 0;
}











SIDEBAR: PSEUDO-RANDOM NUMBERS

//RN4.C
#include <stdlib.h>       /* for s/rand() */
#include <time.h>         /* for time() */
#include <iostream.h>
int main() {	     
  int seed = time(0); // Get number of seconds since 1970
  srand(seed); 	      // Use that as the seed for the PRNG
  for (int i = 0; i<10; ++i) cout << rand()%100 << ' ';  
  cout << endl;	      
  return 0;
}

% ./foo
86 85 44 69 91 67 68 45 58 46 
% 







SIDEBAR: PSEUDO-RANDOM NUMBERS

//RN4.C
#include <stdlib.h>       /* for s/rand() */
#include <time.h>         /* for time() */
#include <iostream.h>
int main() {	     
  int seed = time(0); // Get number of seconds since 1970
  srand(seed); 	      // Use that as the seed for the PRNG
  for (int i = 0; i<10; ++i) cout << rand()%100 << ' ';  
  cout << endl;	      
  return 0;
}

% ./foo
86 85 44 69 91 67 68 45 58 46 
% ./foo
62 30 32 75 71 42 65 14 16 52 
% 





SIDEBAR: PSEUDO-RANDOM NUMBERS

//RN4.C
#include <stdlib.h>       /* for s/rand() */
#include <time.h>         /* for time() */
#include <iostream.h>
int main() {	     
  int seed = time(0); // Get number of seconds since 1970
  srand(seed); 	      // Use that as the seed for the PRNG
  for (int i = 0; i<10; ++i) cout << rand()%100 << ' ';  
  cout << endl;	      
  return 0;
}

% ./foo
86 85 44 69 91 67 68 45 58 46 
% ./foo
62 30 32 75 71 42 65 14 16 52 
% ./foo
7 42 13 57 73 61 54 53 21 34 
% 



SIDEBAR: PSEUDO-RANDOM NUMBERS

//RN5.C
#include <stdlib.h>       /* for s/rand() */
#include <time.h>         /* for time() */
#include <iostream.h>
int main() {	     
  srand(time(0));     // Seed the PRNG from the clock
  for (int i = 0; i<10; ++i) cout << rand()%100 << ' ';  
  cout << endl;	      
  return 0;
}












SIDEBAR: PSEUDO-RANDOM NUMBERS - UPSHOTS

 - Random numbers needed for all sorts of things (statistics,
   simulations, games...)				     



				     


						  








			  




SIDEBAR: PSEUDO-RANDOM NUMBERS - UPSHOTS

 - Random numbers needed for all sorts of things (statistics,
   simulations, games...)				     

 - Really `real' random numbers are hard to come by.  (Do they
   even exist?  It's philosophical..)
				     
 - Computer programs (typically) use algorithms for
   pseudo-random number generation (PRNG) instead.
						  








			  




SIDEBAR: PSEUDO-RANDOM NUMBERS - UPSHOTS

 - Random numbers needed for all sorts of things (statistics,
   simulations, games...)				     

 - Really `real' random numbers are hard to come by.  (Do they
   even exist?  It's philosophical..)
				     
 - Computer programs (typically) use algorithms for
   pseudo-random number generation (PRNG) instead.
						  
 - You give a PRNG a `seed' once to get it started at the
   beginning, which produces a whole sequence of PRN's.






			  




SIDEBAR: PSEUDO-RANDOM NUMBERS - UPSHOTS

 - Random numbers needed for all sorts of things (statistics,
   simulations, games...)				     

 - Really `real' random numbers are hard to come by.  (Do they
   even exist?  It's philosophical..)
				     
 - Computer programs (typically) use algorithms for
   pseudo-random number generation (PRNG) instead.
						  
 - You give a PRNG a `seed' once to get it started at the
   beginning, which produces a whole sequence of PRN's.

 - In UNIX, you call srand(num) ONCE per run of the program
   to seed the PRNG with value num.



			  




SIDEBAR: PSEUDO-RANDOM NUMBERS - UPSHOTS

 - Random numbers needed for all sorts of things (statistics,
   simulations, games...)				     

 - Really `real' random numbers are hard to come by.  (Do they
   even exist?  It's philosophical..)
				     
 - Computer programs (typically) use algorithms for
   pseudo-random number generation (PRNG) instead.
						  
 - You give a PRNG a `seed' once to get it started at the
   beginning, which produces a whole sequence of PRN's.

 - In UNIX, you call srand(num) ONCE per run of the program
   to seed the PRNG with value num.

 - Then you call rand() whenever you want a PRN.  It returns
   a non-negative integer.
			  




SIDEBAR: PSEUDO-RANDOM NUMBERS - UPSHOTS

 - Random numbers needed for all sorts of things (statistics,
   simulations, games...)				     

 - Really `real' random numbers are hard to come by.  (Do they
   even exist?  It's philosophical..)
				     
 - Computer programs (typically) use algorithms for
   pseudo-random number generation (PRNG) instead.
						  
 - You give a PRNG a `seed' once to get it started at the
   beginning, which produces a whole sequence of PRN's.

 - In UNIX, you call srand(num) ONCE per run of the program
   to seed the PRNG with value num. 

 - Then you call rand() whenever you want a PRN.  It returns
   a non-negative integer.
			  
 - You can use % etc to `shape' the returned value to your
   needs.						  


BINARY SEARCH TREES - Insertion











		 







       	  



BINARY SEARCH TREES - Insertion
//Rt5.C
#include <stdlib.h>       /* for s/rand() */
#include <time.h>         /* for time() */
int RND() { return rand()%1000; }
int main() {	     
  srand(time(0));
  Tree * root = new Tree(RND(),NULL,NULL);       	       	
  for (int i = 1; i<7; ++i) root->Insert(RND());
  root->Print(0);
  return 0;
} 	   
		 







       	  



BINARY SEARCH TREES - Insertion
//Rt5.C
#include <stdlib.h>       /* for s/rand() */
#include <time.h>         /* for time() */
int RND() { return rand()%1000; }
int main() {	     
  srand(time(0));
  Tree * root = new Tree(RND(),NULL,NULL);       	       	
  for (int i = 1; i<7; ++i) root->Insert(RND());
  root->Print(0);
  return 0;
} 	   
		 
 .96 01     
 ..99 00    
 218 11     
 .735 01    
 ..795 01   
 ...869 01  
 ....964 00 
       	  



BINARY SEARCH TREES - Insertion
//Rt5.C
#include <stdlib.h>       /* for s/rand() */
#include <time.h>         /* for time() */
int RND() { return rand()%1000; }
int main() {	     
  srand(time(0));
  Tree * root = new Tree(RND(),NULL,NULL);       	       	
  for (int i = 1; i<7; ++i) root->Insert(RND());
  root->Print(0);
  return 0;
} 	   
       	       	       	 
 .96 01      ...178 00   
 ..99 00     ..385 10    
 218 11      .434 10     
 .735 01     754 11      
 ..795 01    .755 01     
 ...869 01   ..824 01    
 ....964 00  ...954 00   
       	  



BINARY SEARCH TREES - Insertion
//Rt5.C
#include <stdlib.h>       /* for s/rand() */
#include <time.h>         /* for time() */
int RND() { return rand()%1000; }
int main() {	     
  srand(time(0));
  Tree * root = new Tree(RND(),NULL,NULL);       	       	
  for (int i = 1; i<7; ++i) root->Insert(RND());
  root->Print(0);
  return 0;
} 	   
		 
 .96 01      ...178 00   .306 01    
 ..99 00     ..385 10    ..512 00   
 218 11      .434 10     560 11     
 .735 01     754 11      ..608 00   
 ..795 01    .755 01     .615 11    
 ...869 01   ..824 01    ...875 00  
 ....964 00  ...954 00   ..921 10   
       	  



BINARY SEARCH TREES - Insertion
//Rt5.C
#include <stdlib.h>       /* for s/rand() */
#include <time.h>         /* for time() */
int RND() { return rand()%1000; }
int main() {	     
  srand(time(0));
  Tree * root = new Tree(RND(),NULL,NULL);       	       	
  for (int i = 1; i<7; ++i) root->Insert(RND());
  root->Print(0);
  return 0;
} 	   
		 
 .96 01      ...178 00   .306 01     153 01       
 ..99 00     ..385 10    ..512 00    .183 01      
 218 11      .434 10     560 11      ..309 01     
 .735 01     754 11      ..608 00    ...624 01    
 ..795 01    .755 01     .615 11     .....700 00  
 ...869 01   ..824 01    ...875 00   ....775 11   
 ....964 00  ...954 00   ..921 10    .....893 00  
       	  



BINARY SEARCH TREES - Insertion
//Rt5.C
#include <stdlib.h>       /* for s/rand() */
#include <time.h>         /* for time() */
int RND() { return rand()%1000; }
int main() {	     
  srand(time(0));
  Tree * root = new Tree(RND(),NULL,NULL);       	       	
  for (int i = 1; i<7; ++i) root->Insert(RND());
  root->Print(0);
  return 0;
} 	   
		 
 .96 01      ...178 00   .306 01     153 01         ..218 00
 ..99 00     ..385 10    ..512 00    .183 01        .634 11 
 218 11      .434 10     560 11      ..309 01       ..723 00
 .735 01     754 11      ..608 00    ...624 01      776 11  
 ..795 01    .755 01     .615 11     .....700 00    ..812 00
 ...869 01   ..824 01    ...875 00   ....775 11     .932 11 
 ....964 00  ...954 00   ..921 10    .....893 00    ..956 00
       	  



BINARY SEARCH TREES - Insertion
//Rt5.C
#include <stdlib.h>       /* for s/rand() */
#include <time.h>         /* for time() */
int RND() { return rand()%1000; }
int main() {	     
  srand(time(0));
  Tree * root = new Tree(RND(),NULL,NULL);       	       	
  for (int i = 1; i<7; ++i) root->Insert(RND());	 
  root->Print(0);					 
  return 0;						 
} 	   						 
		 					 
 .96 01      ...178 00   .306 01     153 01         ..218 00
 ..99 00     ..385 10    ..512 00    .183 01        .634 11 
 218 11      .434 10     560 11      ..309 01       ..723 00
 .735 01     754 11      ..608 00    ...624 01      776 11  
 ..795 01    .755 01     .615 11     .....700 00    ..812 00
 ...869 01   ..824 01    ...875 00   ....775 11     .932 11 
 ....964 00  ...954 00   ..921 10    .....893 00    ..956 00
       	       	       	       	       	       	      ^^^^     	  
						   (I made that	  
       	       	       	       	       	       	   one up by hand)

BINARY SEARCH TREES - Depth




	   				    







	   		
	   

	       				    







BINARY SEARCH TREES - Depth

For the numbers 1 3 4 8 10 12, which is a better BST?


	   				    







	   		
	   

	       				    







BINARY SEARCH TREES - Depth

For the numbers 1 3 4 8 10 12, which is a better BST?

          (a)                            (b)
	   				    
       	   8  				  10
	  / \ 			       	 /  \  
	 3   10	       	       	       	8    12
       	/ \   \	     		       / 
       1   4   12    		      3	 
	   	 		     / \ 		 
	   			    1 	4
	   		
       	   

	       				    







BINARY SEARCH TREES - Depth

For the numbers 1 3 4 8 10 12, which is a better BST?

          (a)                            (b)
	   				    
       	   8  				  10
	  / \ 			       	 /  \  
	 3   10	       	       	       	8    12
       	/ \   \	     		       / 
       1   4   12    		      3	 
	   	 		     / \ 		 
	   			    1 	4
	   		
	   
          (c)  	       	       	       	 (d)
	       				    
           8                   	       	  4 
          / \        		       	 / \   	
         3   12      		       	3   10	 
        / \  /       		       /   / \ 	
       1   4 10			      1	  8   12


BINARY SEARCH TREES - Depth

For the numbers 1 3 4 8 10 12, which is a better BST?

          (a)                            (b)
       	       	    			    
       	   8  	    			  10
	  / \ 			       	 /  \  
	 3   10	       	       	       	8    12
       	/ \   \	     		       / 
       1   4   12    		      3	 
	   	 		     / \     		 
  depth = 2    	  		    1 	4    depth = 3
	   	  			     	      
	   	  			     	      
          (c)  	       	       	       	 (d) 	      
	       	  			     	      
           8                   	       	  4  	      
          / \        		       	 / \   	      
         3   12      		       	3   10	      
        / \  /       		       /   / \ 	      
       1   4 10			      1	  8   12      
  depth = 2    	       	       	    depth = 2 	      
					       	      
BINARY SEARCH TREES - Depth
 
For the numbers 1 3 4 8 10 12, which is a better BST?
 
For N numbers, how deep is the shallowest possible BST?
       	       	    			    	       
















   				

BINARY SEARCH TREES - Depth
 
For the numbers 1 3 4 8 10 12, which is a better BST?
 
For N numbers, how deep is the shallowest possible BST?
       	       	    			    	       
   N   	  min depth    
   0   	     - 	       
















BINARY SEARCH TREES - Depth
 
For the numbers 1 3 4 8 10 12, which is a better BST?
 
For N numbers, how deep is the shallowest possible BST?
       	       	    			    	       
   N   	  min depth    
   0   	     - 	       
   1   	     0 -----> a			     















BINARY SEARCH TREES - Depth
 
For the numbers 1 3 4 8 10 12, which is a better BST?
 
For N numbers, how deep is the shallowest possible BST?
       	       	    			    	       
   N   	  min depth    
   0   	     - 	       
   1   	     0 -----> a			     
   2   	     1 -------------------->  a	       	 b
                          	       \ 	/ 
                            	     	b      a 
                          











BINARY SEARCH TREES - Depth
 
For the numbers 1 3 4 8 10 12, which is a better BST?
 
For N numbers, how deep is the shallowest possible BST?
       	       	    			    	       
   N   	  min depth    
   0   	     - 	       
   1   	     0 -----> a			     
   2   	     1 -------------------->  a	       	 b
   3   	     1 ----->  b	       \ 	/ 
                      / \	     	b      a 
               	     a   c











BINARY SEARCH TREES - Depth
 
For the numbers 1 3 4 8 10 12, which is a better BST?
 
For N numbers, how deep is the shallowest possible BST?
       	       	    			    	       
   N   	  min depth    
   0   	     - 	       
   1   	     0 -----> a			     
   2   	     1 -------------------->  a	       	 b
   3   	     1 ----->  b	       \ 	/ 
   4   	     2 	      / \	     	b      a 
   5   	     2 	     a   c
   6   	     2 	     		     
   7   	     2 ------------------------->  d
                               	       	 /   \
                            	       	b     f
                              	       / \   / \
                                      a	  c e  	g 





BINARY SEARCH TREES - Depth
 
For the numbers 1 3 4 8 10 12, which is a better BST?
 
For N numbers, how deep is the shallowest possible BST?
       	       	    			    	       
   N   	  min depth    
   0   	     - 	       
   1   	     0 -----> a			     
   2   	     1 -------------------->  a	       	 b
   3   	     1 ----->  b	       \ 	/ 
   4   	     2 	      / \	     	b      a 
   5   	     2 	     a   c
   6   	     2 	     		     
   7   	     2 ------------------------->  d
   8   	     3 ----->  a       	       	 /   \
		      / \	       	b     f
		     b   c	       / \   / \
		    / \ / \           a	  c e  	g 
       	      	   d  e f  g
              	       	 \  
               	       	  h    	
                		

BINARY SEARCH TREES - Depth
 
For the numbers 1 3 4 8 10 12, which is a better BST?
 
For N numbers, how deep is the shallowest possible BST?
       	       	    			    	       
   N   	  min depth    
   0   	     - 	       
   1   	     0 -----> a			     
   2   	     1 -------------------->  a	       	 b
   3   	     1 ----->  b	       \ 	/ 
   4   	     2 	      / \	     	b      a 
   5   	     2 	     a   c
   6   	     2 	     		     
   7   	     2 ------------------------->  d
   8   	     3 ----->  a       	       	 /   \
   9         3	      / \	       	b     f
  10         3	     b   c	       / \   / \
   .   	      	    / \ / \           a	  c e  	g 
   .   	      	   d  e f  g
             	       	 \  
               	       	  h    	
             			

BINARY SEARCH TREES - Depth
 
For the numbers 1 3 4 8 10 12, which is a better BST?
 
For N numbers, how deep is the shallowest possible BST?
       	       	    			    	       
   N   	  min depth    
   0   	     - 	       
   1   	     0 -----> a			     
   2   	     1 -------------------->  a	       	 b
   3   	     1 ----->  b	       \ 	/ 
   4   	     2 	      / \	     	b      a 
   5   	     2 	     a   c
   6   	     2 	     		     
   7   	     2 ------------------------->  d
   8   	     3 ----->  a       	       	 /   \
   9   	     3	      / \	       	b     f
  10	     3	     b   c	       / \   / \
   .	      	    / \ / \           a	  c e  	g 
   .   	      	   d  e f  g
  |log  N |  	       	 \  
  |   2	  |    	       	  h    	
  --   	 --  			
('floor of log base 2 of N')
BINARY SEARCH TREES - Lookup























BINARY SEARCH TREES - Lookup


struct Tree {	     



  bool Find(int num) {
    if (num<label)
      if (left) return left->Find(num); else return false;
    if (num>label)
      if (right) return right->Find(num); else return false;
    return true;
  }










BINARY SEARCH TREES - Lookup

#include <iomanip.h>          /* for setw */
struct Tree {	     
  int label;   	       	       	       	
  Tree * left, * right;
  Tree(int num,Tree*l,Tree*r) { label = num; left = l; right = r;}
  bool Find(int num) {
    if (num<label)
      if (left) return left->Find(num); else return false;
    if (num>label)
      if (right) return right->Find(num); else return false;
    return num==label;
  }










BINARY SEARCH TREES - Lookup

#include <iomanip.h>          /* for setw */
struct Tree {	     
  int label;   	       	       	       	
  Tree * left, * right;
  Tree(int num,Tree*l,Tree*r) { label = num; left = l; right = r;}
  bool Find(int num) {
    if (num<label)
      if (left) return left->Find(num); else return false;
    if (num>label)
      if (right) return right->Find(num); else return false;
    return num==label;
  }
  void Insert(int n) {
    if (n<label) {
      if (!left) left = new Tree(n,NULL,NULL);
      else left->Insert(n);
    } else if (n> label) {
      if (!right) right = new Tree(n,NULL,NULL);
      else right->Insert(n);
    }
  }

BINARY SEARCH TREES - Lookup

#include <iomanip.h>          /* for setw */
struct Tree {	     
  int label;   	       	       	       	
  Tree * left, * right;
  Tree(int num,Tree*l,Tree*r) { label = num; left = l; right = r;}
  bool Find(int num) {
    if (num<label)
      if (left) return left->Find(num); else return false;
    if (num>label)
      if (right) return right->Find(num); else return false;
    return num==label;
  }
  void Insert(int n) {..}

  void Print(int depth) {
    if (left) left->Print(depth+1);
    cout << setw(depth) << setfill('.') << "";
    cout << label << endl;
    if (right) right->Print(depth+1);
  }


BINARY SEARCH TREES - Lookup

#include <iomanip.h>          /* for setw */
struct Tree {	     
  int label;   	       	       	       	
  Tree * left, * right;
  Tree(int num,Tree*l,Tree*r) { label = num; left = l; right = r;}
  bool Find(int num) {
    if (num<label)
      if (left) return left->Find(num); else return false;
    if (num>label)
      if (right) return right->Find(num); else return false;
    return num==label;
  }
  void Insert(int n) {..}
  void Print(int depth) {..}		      
  int MaxDepth(int depth) {
    int ld = depth, rd = depth;
    if (left) ld = left->MaxDepth(depth+1);
    if (right) rd = right->MaxDepth(depth+1);
    if (ld>rd) return ld; else return rd;
  }
};		     

BINARY SEARCH TREES - Lookup

For various values of N, insert N random numbers, then
run 1,000,000 Find's and see how long it takes.




















BINARY SEARCH TREES - Lookup

For various values of N, insert N random numbers, then
run 1,000,000 Find's and see how long it takes.

g++ -Wall -pedantic Rt6.C -o foo;./foo
       N     t 
       2  0.17 
















BINARY SEARCH TREES - Lookup

For various values of N, insert N random numbers, then
run 1,000,000 Find's and see how long it takes.

g++ -Wall -pedantic Rt6.C -o foo;./foo
       N     t 
       2  0.17 
       8  0.32 
      32  0.48 
     128  0.83 
     512  1.19 
    2048  1.36 











BINARY SEARCH TREES - Lookup

For various values of N, insert N random numbers, then
run 1,000,000 Find's and see how long it takes.

g++ -Wall -pedantic Rt6.C -o foo;./foo
       N     t 
       2  0.17 
       8  0.32 
      32  0.48 
     128  0.83 
     512  1.19 
    2048  1.36 
    8192  1.72 
   32768  1.98 
  131072   2.4 
  524288  2.94 
 2097152  3.28 
 8388608  3.24 
	       




BINARY SEARCH TREES - Lookup

For various values of N, insert N random numbers, then
run 1,000,000 Find's and see how long it takes.

g++ -Wall -pedantic Rt6.C -o foo;./foo
       N     t       log(N) 
       2  0.17     0.693147 
       8  0.32      2.07944 
      32  0.48      3.46574 
     128  0.83      4.85203 
     512  1.19      6.23832 
    2048  1.36      7.62462 
    8192  1.72      9.01091 
   32768  1.98      10.3972 
  131072   2.4      11.7835 
  524288  2.94      13.1698 
 2097152  3.28      14.5561 
 8388608  3.24      15.9424 





BINARY SEARCH TREES - Lookup

For various values of N, insert N random numbers, then
run 1,000,000 Find's and see how long it takes.

g++ -Wall -pedantic Rt6.C -o foo;./foo
       N     t       log(N)	       t/log(N)
       2  0.17     0.693147	       0.245258
       8  0.32      2.07944	       0.153887
      32  0.48      3.46574	       0.138499
     128  0.83      4.85203	       0.171062
     512  1.19      6.23832	       0.190756
    2048  1.36      7.62462		0.17837
    8192  1.72      9.01091		0.19088
   32768  1.98      10.3972	       0.190436
  131072   2.4      11.7835	       0.203675
  524288  2.94      13.1698	       0.223238
 2097152  3.28      14.5561	       0.225335
 8388608  3.24      15.9424	       0.203232





BINARY SEARCH TREES - Lookup

For various values of N, insert N random numbers, then
run 1,000,000 Find's and see how long it takes.
			     
g++ -Wall -pedantic Rt6.C -o foo;./foo
       N     t  d    log(N)	       t/log(N)
       2  0.17  2  0.693147	       0.245258
       8  0.32  5   2.07944	       0.153887
      32  0.48  9   3.46574	       0.138499
     128  0.83 16   4.85203	       0.171062
     512  1.19 21   6.23832	       0.190756
    2048  1.36 24   7.62462		0.17837
    8192  1.72 32   9.01091		0.19088
   32768  1.98 35   10.3972	       0.190436
  131072   2.4 39   11.7835	       0.203675
  524288  2.94 48   13.1698	       0.223238
 2097152  3.28 48   14.5561	       0.225335
 8388608  3.24 49   15.9424	       0.203232





BINARY SEARCH TREES - Lookup

For various values of N, insert N random numbers, then
run 1,000,000 Find's and see how long it takes.

g++ -Wall -pedantic Rt6.C -o foo;./foo
       N     t  d    log(N)  d/log(N)  t/log(N)
       2  0.17  2  0.693147   2.88539  0.245258
       8  0.32  5   2.07944   2.40449  0.153887
      32  0.48  9   3.46574   2.59685  0.138499
     128  0.83 16   4.85203   3.29759  0.171062
     512  1.19 21   6.23832   3.36629  0.190756
    2048  1.36 24   7.62462    3.1477   0.17837
    8192  1.72 32   9.01091   3.55125   0.19088
   32768  1.98 35   10.3972   3.36629  0.190436
  131072   2.4 39   11.7835   3.30971  0.203675
  524288  2.94 48   13.1698    3.6447  0.223238
 2097152  3.28 48   14.5561   3.29759  0.225335
 8388608  3.24 49   15.9424   3.07357  0.203232





