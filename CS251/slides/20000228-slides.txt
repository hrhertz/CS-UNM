QUESTIONS

LAST TIME:
 - Administrivia: Option for late days on Program 1 expiring..
 - iostream tips: char foo; cin.get(foo);
 - Value semantics: Copy ctor and op=
 - Intro to pointers
 - New and delete

TODAY:
 - Administrivia: Option for late days on Program 1 expiring..
 - Dynamic arrays
 - Value semantics
 - Quiz postmortem

HOMEWORK: PC++P Ch 15
 Program 2 due in 6 days 23.5 hours: MON MAR 6 1:30 PM
			 
  NO CREDIT for any Program 2's turned-in
  AFTER Mon Mar 6 1:30 PM, REGARDLESS of 
  `free late day' use.
					     #include <stdlib.h>
                               int * foo; .. delete [] foo;
					     foo = NULL;   
ADMINISTRIVIA

 - If you plan to use any of your three free late days
   on PROGRAM 1, your request to do so must be on your student
   resource web page before 5PM FRIDAY MAR 3, 2000!  
	     	 				       
 - Your option to EVER use ANY free late days on PROGRAM 1 
   EXPIRES at 5PM FRIDAY MAR 3, 2000!  FAIR WARNING!

 - Your on-paper Program 1 grade DOES NOT include any free 
   late days.  The final adjusted score will appear ONLY on 
   your student resources web page.

 - Program 2 adjustments (spec version 1.2):

   - New command `C'; new response `CIRCULATE'

   - Revised due dates:
    Program 2 due THU MAR 2 5PM for EXTRA CREDIT +3%
    Program 2 due MON MAR 6 1:30 PM for FULL CREDIT         
     NO CREDIT for any Program 2's turned-in
     after MON MAR 6 1:30 PM, REGARDLESS of 
     `free late day' use.

VALUE SEMANTICS
		  	       
 A class has value semantics if copies of objects are completely
 independent of each other, like copies of ints are..
 
but isn't that just always true anyway?  

..It (generally) is, until you start dealing with pointers,
  and dynamic memory..					   
  
Giving a class value semantics is usually not too hard.  You
just have to remember to declare and appropriately define
four methods:
	     
class Foo {  
public:	     
  Foo();                        // (1) The default ctor
  Foo(const Foo &);             // (2) The copy ctor   
  Foo & operator=(const Foo &);	// (3) The assignment operator
  ~Foo();                       // (4) The destructor
..
private:
..
};
THE BIG FOUR: DEF CTOR, COPY CTOR, OP=, & DTOR
		  	       
 - In almost every non-trivial class, you declare them all.
							   
 - For value semantics, define copy ctor and op= so 
   that they copy everything in the object
 
 - Passing objects by value uses the copy ctor and the dtor
       
 - A return type of 'Foo &' from 'Foo::operator=(const Foo &)'
   allows 'multiple assignments' like
     Foo a,b,c; ... a = b = c;
   to work naturally, so long as you always return '*this'
   from Foo::operator=(const Foo &) methods.

	     








POINTERS - OVERVIEW

 A pointer is a place in memory that contains the address of
 something else in memory.  A pointer to a TYPE is represented
 by 'TYPE *': 		  		       	  

    int i;        // i is an integer		  
    int * pi;     // pi is a pointer to int
    char * pc;    // pc is a pointer to char	  
    double ** ppd;// ppd is a pointer to a pointer to double

 The '&' address-of operator creates a pointer to something
 (whenever that something actually has an address):	   

    pi = &i;      // now pi is `pointing at' i (the location in
		  // memory called 'pi' contains the address of
		  // the location in memory called 'i').       

    pi = &(1+9);  // Syntax error: The expression 1+9 doesn't
		  // have an address.  Variables and objects
		  // have addresses.  Numbers and such don't.
    


POINTERS - OVERVIEW
 C++ systematically confuses pointers and arrays: 

  - The NAME of an array is like a POINTER TO THE FIRST
    ARRAY ELEMENT.

  - Any pointer can be accessed using '[subscript]' AS IF
    it was the NAME OF AN ARRAY.  (Whether that makes any
    sense or not, in any spot of any particular program!)
       	     
  - The expression 'new TYPE[SIZE]' creates a new array
    of SIZE objects of type TYPE.
   	    	    			      
      int * pi;
      pi = new int[7]; // now pi points to a new array of 7 int
      char * pc;
      int count = 12; 					
      pc = new char[count]; // pc points to an array of 12 char
      			   
  - The expression 'delete [] POINTER' throws back an array that
    was created with 'new'. 
      delete [] pi;   // array is freed, pi now points at garbage
      delete [] pc;   // ditto.

POINTERS TO DYNAMIC ARRAYS - EXAMPLE

#include <iostream.h>		   
int main() {          // Reverse a list of numbers, take 1
  int nums[50];       // nums is an array of 50 ints
  unsigned int max;				    
  cin >> max;	   		   		    	  
  if (max>50) { cout << "max too big"; exit(1); }  	  
  for (int i = 0;i<max;++i) cin >> nums[i];  // array access
  for (int i = max-1;i>=0;--i) cout << nums[i] << ' ';	// ditto
  return 0;	      				      	  	
}		      				      	  	
#include <iostream.h> 		   		    	  	
int main() {          // Reverse a list of numbers, take 2	
  int * nums;	      // nums is a pointer to int(s)		
  unsigned int max;   						
  cin >> max;	      	       	       	       	       	       	
  nums = new int[max];	// CREATING A NEW ARRAY OF max INTS!
  for (int i = 0;i<max;++i) cin >> nums[i];  // array access	
  for (int i = max-1;i>=0;--i) cout << nums[i] << ' ';	// ditto
  delete [] nums;      	// DESTROYING THE ARRAY WE CREATED!
  return 0;		       	       	       	       	
}						      

POINTERS TO DYNAMIC ARRAYS - IMPORTANCE OF VALUE SEMANTICS
 What does this program print?
class Foo {  // WARNING: No copy ctor or op= defined!
public:	       		      	      
  Foo() {			      
    _ary = new int[10]; 	      
    for (int i = 0; i<10; ++i) _ary[i] = -i;
  }			   	      	    
  int Get(int index) { return _ary[index]; }
  ~Foo() { delete [] _ary; }	      
private:       		   		    
  int * _ary; 		   		    
}; 			   		    
   			   		    
#include <iostream.h>	   		    
int main() {	     	   		    
  Foo f;	     	   		    
  cout << f.Get(1) << endl;
  return 0;
}




POINTERS TO DYNAMIC ARRAYS - IMPORTANCE OF VALUE SEMANTICS
 What does this program print?
class Foo {  // WARNING: No copy ctor or op= defined!
public:	       		      	      
  Foo() {			      
    _ary = new int[10]; 	      
    for (int i = 0; i<10; ++i) _ary[i] = -i;
  }			   	      	    
  int Get(int index) { return _ary[index]; }
  ~Foo() { delete [] _ary; }	      
private:       		   		    
  int * _ary; 		   		    
}; 			   		    
   			   		    
#include <iostream.h>	   		    
int main() {	     	   		    
  Foo f;	     	   		    
  cout << f.Get(1) << endl;
  return 0;
}

% ./foo
-1
% 
POINTERS TO DYNAMIC ARRAYS - IMPORTANCE OF VALUE SEMANTICS
 What does this program print?
class Foo {  // WARNING: No copy ctor or op= defined!
public:	       		      	      
  Foo() {			      
    _ary = new int[10]; 	      
    for (int i = 0; i<10; ++i) _ary[i] = -i;
  }			   	      	    
  int Get(int index) { return _ary[index]; }
  ~Foo() { delete [] _ary; }	      
private:       		   		    
  int * _ary; 		   		    
}; 			   		    
   			   		    
#include <iostream.h>	   		    
int main() {	     	   		    
  Foo f;	     	   		    
  { Foo g; g = f; }         //ADDED THIS LINE, OTHERWISE IDENTICAL
  cout << f.Get(1) << endl;
  return 0;
}



POINTERS TO DYNAMIC ARRAYS - IMPORTANCE OF VALUE SEMANTICS
 What does this program print?
class Foo {  // WARNING: No copy ctor or op= defined!
public:	       		      	      
  Foo() {			      
    _ary = new int[10]; 	      
    for (int i = 0; i<10; ++i) _ary[i] = -i;
  }			   	      	    
  int Get(int index) { return _ary[index]; }
  ~Foo() { delete [] _ary; }	      
private:       		   		    
  int * _ary; 		   		    
}; 			   		    
   			   		    
#include <iostream.h>	   		    
int main() {	     	   		    
  Foo f;	     	   		    
  { Foo g; g = f; }         //ADDED THIS LINE, OTHERWISE IDENTICAL
  cout << f.Get(1) << endl;
  return 0;
}
% ./foo
1075185072
% 
POINTERS TO DYNAMIC ARRAYS - IMPORTANCE OF VALUE SEMANTICS
 What does this program print?
class Foo {  // WARNING: No copy ctor or op= defined!
public:	       		      	      
  Foo() {			      
    _ary = new int[10]; 	      
    for (int i = 0; i<10; ++i) _ary[i] = -i;
  }			   	      	    
  int Get(int index) { return _ary[index]; }
  ~Foo() { delete [] _ary; }	      
private:       		   		    
  int * _ary; 		   		    
}; 			   		    
   			   		    
#include <iostream.h>	   		    
int main() {	     	   		    
  Foo f;	     	   		    
  { Foo g; g = f; }         //ADDED THIS LINE, OTHERWISE IDENTICAL
  cout << f.Get(1) << endl;
  return 0;
}
% ./foo
1075185072
%      	       	       	    ...WHAT HAPPENED??
POINTERS TO DYNAMIC ARRAYS - IMPORTANCE OF VALUE SEMANTICS
 What does this program print?
class Foo {  // WARNING: No copy ctor or op= defined!
public:	       		      	      
  Foo() {			      
    _ary = new int[10]; 	      
    for (int i = 0; i<10; ++i) _ary[i] = -i;
  }			   	      	    
  int Get(int index) { return _ary[index]; }
  ~Foo() { delete [] _ary; }	      
private:       		   		    
  int * _ary; 		    Right here, op= was called.  We didn't
}; 			    write an op=, so the compiler did. The
       	       	  	    op= it wrote just COPIED THE POINTER  
#include <iostream.h>	    from f._ary to g._ary.  So now BOTH 
int main() {   /------------f._ary and g._ary are pointing at the
  Foo f;      /	       	    SAME array.	       	       	       	 
  { Foo g; g = f; }    	       	       
  cout << f.Get(1) << endl;
  return 0; 
}	    
% ./foo	    
1075185072	   
%      	       	       	    ...WHAT HAPPENED??
POINTERS TO DYNAMIC ARRAYS - IMPORTANCE OF VALUE SEMANTICS
 What does this program print?
class Foo {  // WARNING: No copy ctor or op= defined!
public:	       		      	      
  Foo() {			      
    _ary = new int[10]; 	      
    for (int i = 0; i<10; ++i) _ary[i] = -i;
  }			   	      	    
  int Get(int index) { return _ary[index]; }
  ~Foo() { delete [] _ary; }	      
private:       		   		    
  int * _ary; 		    Right here, op= was called.  We didn't
}; 			    write an op=, so the compiler did. The
   			    op= it wrote just COPIED THE POINTER  
#include <iostream.h>	    from f._ary to g._ary.  So now BOTH 
int main() {   /------------f._ary and g._ary are pointing at the
  Foo f;      /	       	    SAME array.	       	       	       	 
  { Foo g; g = f; }--------\   	       
  cout << f.Get(1) << endl; \-Right here, ~Foo gets called on g.
  return 0;   	              That DESTROYS the array that f._ary
}	       		      is STILL POINTING AT!    	       	 
% ./foo	       
1075185072     
%      	       	       	    ...WHAT HAPPENED??
POINTERS TO DYNAMIC ARRAYS - IMPORTANCE OF VALUE SEMANTICS
 What does this program print?
class Foo {  // WARNING: No copy ctor or op= defined!
public:	       		      	      
  Foo() {  			      
    _ary = new int[10]; 	      
    for (int i = 0; i<10; ++i) _ary[i] = -i;
  }	   		   	      	    
  int Get(int index) { return _ary[index]; }
  ~Foo() { delete [] _ary; }	      
private:       		   		    
  int * _ary; 		    Right here, op= was called.  We didn't
}; 	   		    write an op=, so the compiler did. The
   	   		    op= it wrote just COPIED THE POINTER  
#include <iostream.h>	    from f._ary to g._ary.  So now BOTH 
int main() {   /------------f._ary and g._ary are pointing at the
  Foo f;      /	       	    SAME array.	       	       	       	 
  { Foo g; g = f; }--------\   	       
  cout << f.Get(1) << endl; \-Right here, ~Foo gets called on g.
  return 0;  \	              That DESTROYS the array that f._ary
}	      \		      is STILL POINTING AT!    	       	 
% ./foo	       \------And right here, we access into that array
1075185072	      that's already been deleted. We get garbage.
%      	       	       	    ...WHAT HAPPENED??
POINTERS TO DYNAMIC ARRAYS - IMPORTANCE OF VALUE SEMANTICS
 What does this program print?
class Foo {  // WARNING: No copy ctor or op= defined!
public:	       		      	      
  Foo() {  			      
    _ary = new int[10]; 	      
    for (int i = 0; i<10; ++i) _ary[i] = -i;
  }	   		   	      	    
  int Get(int index) { return _ary[index]; }
  ~Foo() { delete [] _ary; }	      
private:       		   
  int * _ary; 	      	   
};     	       	      	   
   	   	      	   
#include <iostream.h> 	   
int main() {   	       	   
  Foo f;       	   	   
  { Foo g; g = f; }    	   
  cout << f.Get(1) << endl;
  return 0;  		   
}	     		   
			   
			   
			   
POINTERS TO DYNAMIC ARRAYS - IMPORTANCE OF VALUE SEMANTICS
 What does this program print?
class Foo {  // WARNING: No copy ctor or op= defined!
public:	       		      	      
  Foo() {  			      
    _ary = new int[10]; 	      
    for (int i = 0; i<10; ++i) _ary[i] = -i;
  }	   		   	      	    
  int Get(int index) { return _ary[index]; }
  ~Foo() { delete [] _ary; }	      
private:       		     f 	       	
  int * _ary;  	       	     +---------+
};     	       	       	     |_ary:    |
       	       	       	     +---------+
#include <iostream.h>  	       	       	
int main() {   	       	       	       
> Foo f;       	   		       
  { Foo g; g = f; }    	   	       
  cout << f.Get(1) << endl;	       
  return 0;  			       
}	     			       
				       
				       
				       
POINTERS TO DYNAMIC ARRAYS - IMPORTANCE OF VALUE SEMANTICS
 What does this program print?
class Foo {  // WARNING: No copy ctor or op= defined!
public:	       		      	      
  Foo() {  vvvvvvvvvvv		      
    _ary = new int[10]; 	      
    for (int i = 0; i<10; ++i) _ary[i] = -i;
  }	   		   	      	    
  int Get(int index) { return _ary[index]; }
  ~Foo() { delete [] _ary; }	      	 
private:       		     f 	       	    
  int * _ary; 	      	     +---------+    
};     	       	       	     |_ary:    |    
   	   	      	     +---------+    
#include <iostream.h>  	       	       	    
int main() {   	       	       	       +------+	      
  Foo f;       	   		       |  ?   |
  { Foo g; g = f; }    	   	       |  ?   |
  cout << f.Get(1) << endl;	       |  ?   |
  return 0;  			       |  ?   |
}	     			       |...   |
				       |  ?   |
				       |  ?   |
				       +------+
POINTERS TO DYNAMIC ARRAYS - IMPORTANCE OF VALUE SEMANTICS
 What does this program print?
class Foo {  // WARNING: No copy ctor or op= defined!
public:	       		      	      
  Foo() {  			      
>   _ary = new int[10]; 	      
    for (int i = 0; i<10; ++i) _ary[i] = -i;
  }	   		   	      	    
  int Get(int index) { return _ary[index]; }
  ~Foo() { delete [] _ary; }	      	   
private:       		     f 	       	   
  int * _ary; 	      	     +---------+   
};     	       	      	     |_ary:  ---\  
   	   	      	     +---------+|  
#include <iostream.h>  	       	       	V  
int main() {   	       	       	       +------+
  Foo f;       	   		       |  ?   |
  { Foo g; g = f; }    	   	       |  ?   |
  cout << f.Get(1) << endl;	       |  ?   |
  return 0;  			       |  ?   |
}	     			       |...   |
				       |  ?   |
				       |  ?   |
				       +------+
POINTERS TO DYNAMIC ARRAYS - IMPORTANCE OF VALUE SEMANTICS
 What does this program print?
class Foo {  // WARNING: No copy ctor or op= defined!
public:	       		      	      
  Foo() {  			      
    _ary = new int[10]; 	      
>   for (int i = 0; i<10; ++i) _ary[i] = -i;
  }	   		   	      	    
  int Get(int index) { return _ary[index]; }
  ~Foo() { delete [] _ary; }   	       	 
private:       		     f 	       	 
  int * _ary; 	      	     +---------+ 
};     	       	      	     |_ary:  ---\
   	   	      	     +---------+|
#include <iostream.h> 		       	V
int main() {   	       	       	       +------+	      
  Foo f;       	       	       	       |  0   |
  { Foo g; g = f; }    	   	       | -1   |
  cout << f.Get(1) << endl;	       | -2   |
  return 0;  			       | -3   |
}	     			       |...   |
				       | -8   |
				       | -9   |
				       +------+
POINTERS TO DYNAMIC ARRAYS - IMPORTANCE OF VALUE SEMANTICS
 What does this program print?
class Foo {  // WARNING: No copy ctor or op= defined!
public:	       		      	      
  Foo() {  			      
    _ary = new int[10]; 	      
    for (int i = 0; i<10; ++i) _ary[i] = -i;
  }	   		   	      	    
  int Get(int index) { return _ary[index]; }
  ~Foo() { delete [] _ary; }	      
private:       		     f 	       	       	g      	    
  int * _ary; 	      	     +---------+	+---------+
};     	       	      	     |_ary:  ---\       |_ary: 	  |
       	       	       	     +---------+|      	+---------+
#include <iostream.h> 		       	V     	      
int main() {   	       	       	       +------+
  Foo f;       	   		       |  0   |
  { Foo g; g = f; }    	   	       | -1   |
  co^^^^^ f.Get(1) << endl;	       | -2   |
  return 0;  			       | -3   |
}	     			       |...   |
				       | -8   |
				       | -9   |
				       +------+
POINTERS TO DYNAMIC ARRAYS - IMPORTANCE OF VALUE SEMANTICS
 What does this program print?
class Foo {  // WARNING: No copy ctor or op= defined!
public:	       		      	      
  Foo() {  vvvvvvvvvvv		      
    _ary = new int[10]; 	      
    for (int i = 0; i<10; ++i) _ary[i] = -i;
  }	   		   	      	    
  int Get(int index) { return _ary[index]; }  
  ~Foo() { delete [] _ary; }   	       	      
private:       		     f 	       	       	g      	    
  int * _ary; 	      	     +---------+      	+---------+
};     	       	      	     |_ary:  ---\       |_ary: 	  |
       	       	       	     +---------+|      	+---------+
#include <iostream.h> 		       	V     	      
int main() {   	       	       	       +------+	       +------+
  Foo f;       	   		       |  0   |	       |  ?   |
  { Foo g; g = f; }    	   	       | -1   |	       |  ?   |
  cout << f.Get(1) << endl;	       | -2   |	       |  ?   |
  return 0;  			       | -3   |	       |  ?   |
}	     			       |...   |	       |...   |
				       | -8   |	       |  ?   |
				       | -9   |	       |  ?   |
				       +------+	       +------+
POINTERS TO DYNAMIC ARRAYS - IMPORTANCE OF VALUE SEMANTICS
 What does this program print?
class Foo {  // WARNING: No copy ctor or op= defined!
public:	       		      	      
  Foo() {  			      
>   _ary = new int[10]; 	      
    for (int i = 0; i<10; ++i) _ary[i] = -i;
  }	   		   	      	    
  int Get(int index) { return _ary[index]; }   	      
  ~Foo() { delete [] _ary; }   	       	      	      
private:       		     f 	       	       	g      	    
  int * _ary; 	      	     +---------+      	+---------+
};     	       	      	     |_ary:  ---\       |_ary: 	 --\
       	       	       	     +---------+|      	+---------+|
#include <iostream.h> 		       	V     	      	   V
int main() {   	       	       	       +------+	       +------+
  Foo f;       	   		       |  0   |	       |  ?   |
  { Foo g; g = f; }    	   	       | -1   |	       |  ?   |
  cout << f.Get(1) << endl;	       | -2   |	       |  ?   |
  return 0;  			       | -3   |	       |  ?   |
}	     			       |...   |	       |...   |
				       | -8   |	       |  ?   |
				       | -9   |	       |  ?   |
				       +------+	       +------+
POINTERS TO DYNAMIC ARRAYS - IMPORTANCE OF VALUE SEMANTICS
 What does this program print?
class Foo {  // WARNING: No copy ctor or op= defined!
public:	       		      	      
  Foo() {  			      
    _ary = new int[10]; 	      
>   for (int i = 0; i<10; ++i) _ary[i] = -i;
  }	   		   	      	    
  int Get(int index) { return _ary[index]; }   	      
  ~Foo() { delete [] _ary; }   	       	      	      
private:       		     f 	       	       	g      	    
  int * _ary; 	      	     +---------+      	+---------+
};     	       	      	     |_ary:  ---\       |_ary: 	 --\
       	       	       	     +---------+|      	+---------+|
#include <iostream.h> 		       	V     	      	   V
int main() {   	       	       	       +------+	       +------+
  Foo f;       	   		       |  0   |	       |  0   |
  { Foo g; g = f; }    	   	       | -1   |	       | -1   |
  cout << f.Get(1) << endl;	       | -2   |	       | -2   |
  return 0;  			       | -3   |	       | -3   |
}	     			       |...   |	       |...   |
				       | -8   |	       | -8   |
				       | -9   |	       | -9   |
				       +------+	       +------+
POINTERS TO DYNAMIC ARRAYS - IMPORTANCE OF VALUE SEMANTICS
 What does this program print?
class Foo {  // WARNING: No copy ctor or op= defined!
public:	       		      	      
  Foo() {  			      
    _ary = new int[10]; 	      
    for (int i = 0; i<10; ++i) _ary[i] = -i;
  }	   		   	      	    
  int Get(int index) { return _ary[index]; }   	      
  ~Foo() { delete [] _ary; }   	       	      	      
private:       		     f 	       	       	g      	    
  int * _ary; 	      	     +---------+      	+---------+
};     	       	      	     |_ary:  ---\       |_ary: 	 --\
       	       	       	     +---------+|      	+---------+|
#include <iostream.h> 		       	V     	      	   V
int main() {   	       	       	       +------+	       +------+
  Foo f;   vvvvv   		       |  0   |	       |  0   |
  { Foo g; g = f; }    	   	       | -1   |	       | -1   |
  cout << f.Get(1) << endl;	       | -2   |	       | -2   |
  return 0;  			       | -3   |	       | -3   |
}	     			       |...   |	       |...   |
				       | -8   |	       | -8   |
				       | -9   |	       | -9   |
				       +------+	       +------+
POINTERS TO DYNAMIC ARRAYS - IMPORTANCE OF VALUE SEMANTICS
 What does this program print?
class Foo {  // WARNING: No copy ctor or op= defined!
public:	       		      	      
  Foo() {  			      
    _ary = new int[10]; 	      
    for (int i = 0; i<10; ++i) _ary[i] = -i; 
  }	   		   	      	       	  (default op=
  int Get(int index) { return _ary[index]; }   	   just copies
  ~Foo() { delete [] _ary; }   	       	      	   the pointer!)
private:       		     f 	       	       	g      	    
  int * _ary; 	      	     +---------+      	+---------+
};     	       	      	     |_ary:  ---\    /---_ary: 	  |
       	       	       	     +---------+|    | 	+---------+
#include <iostream.h>  	       	       	V    V 	      
int main() {   	       	       	       +------+        +------+
  Foo f;   vvvvv   	       	       |  0   |	       |  0   |
  { Foo g; g = f; }    	   	       | -1   |	       | -1   |
  cout << f.Get(1) << endl;	       | -2   |        | -2   |
  return 0;  			       | -3   |        | -3   |
}	     			       |...   |	       |...   |
				       | -8   |        | -8   |
				       | -9   |	       | -9   |
				       +------+	       +------+
POINTERS TO DYNAMIC ARRAYS - IMPORTANCE OF VALUE SEMANTICS
 What does this program print?
class Foo {  // WARNING: No copy ctor or op= defined!
public:	       		      	      
  Foo() {  			      
    _ary = new int[10]; 	      
    for (int i = 0; i<10; ++i) _ary[i] = -i;
  }	   		   	      	       	  (default op=
  int Get(int index) { return _ary[index]; }   	   just copies
  ~Foo() { delete [] _ary; }   	       	      	   the pointer!)
private:       		     f 	       	       	g      	    
  int * _ary; 	      	     +---------+      	+---------+
};     	       	      	     |_ary:  ---\    /---_ary: 	  |
       	       	       	     +---------+|    | 	+---------+
#include <iostream.h>  	       	       	V    V 	      
int main() {   	       	       	       +------+	(now,  +------+
  Foo f;   vvvvv   	       	       |  0   |	there's|  0   |
  { Foo g; g = f; }    	   	       | -1   |	nobody | -1   |
  cout << f.Get(1) << endl;	       | -2   |pointing| -2   |
  return 0;  			       | -3   |at this | -3   |
}	     			       |...   |	array->|...   |
				       | -8   |anymore)| -8   |
				       | -9   |	       | -9   |
   				       +------+	       +------+
POINTERS TO DYNAMIC ARRAYS - IMPORTANCE OF VALUE SEMANTICS
 What does this program print?		 
class Foo {  // WARNING: No copy ctor or op= defined!
public:	       		      	      	 
  Foo() {  			      	 
    _ary = new int[10]; 	      	 
    for (int i = 0; i<10; ++i) _ary[i] = -i;
  }	   		   	      	    
  int Get(int index) { return _ary[index]; }   	      
  ~Foo() { delete [] _ary; }   	       	      	      
private:       	       	     f 	       	       	g      	    
  int * _ary; 	      	     +---------+       	+---------+
};     	       	      	     |_ary:  ---\    /---_ary:    |
       	       	       	     +---------+|    | 	+---------+
#include <iostream.h> 		       	V    V	      	   
int main() {   	       	       	       +------+	       +------+
  Foo f;       	        	       |  0   |	       |  0   |
  { Foo g; g = f; }<-dtor called here  | -1   |	       | -1   |
  cout << f.Get(1) << endl;	       | -2   |	       | -2   |
  return 0;  			       | -3   |	       | -3   |
}	     			       |...   |	       |...   |
				       | -8   |	       | -8   |
				       | -9   |	       | -9   |
				       +------+	       +------+
POINTERS TO DYNAMIC ARRAYS - IMPORTANCE OF VALUE SEMANTICS
 What does this program print?
class Foo {  // WARNING: No copy ctor or op= defined!
public:	       		      	      
  Foo() {  			      
    _ary = new int[10]; 	      
    for (int i = 0; i<10; ++i) _ary[i] = -i;
  }	   		   	      	    
  int Get(int index) { return _ary[index]; }   	      
  ~Foo() { delete [] _ary; }   	       	      	      
private:   ^^^^^^^^^^^^^^    f 	       	       	g      	    
  int * _ary; 	      	     +---------+       	+---------+
};     	       	      	     |_ary:  ---\    /---_ary: 	  | 
       	       	       	     +---------+|    | 	+---------+
#include <iostream.h> 		       	V    V 	       	  
int main() {   	       	       	       +------+	       +------+
  Foo f;       	   		       |  ?   |	       |  0   |
  { Foo g; g = f; }    	   	       |  ?   |	       | -1   |
  cout << f.Get(1) << endl;	       |  ?   |	       | -2   |
  return 0;  			       |  ?   |	       | -3   |
}	     			       |...   |	       |...   |
				       |  ?   |	       | -8   |
				       |  ?   |	       | -9   |
				       +------+	       +------+
POINTERS TO DYNAMIC ARRAYS - IMPORTANCE OF VALUE SEMANTICS
 What does this program print?
class Foo {  // WARNING: No copy ctor or op= defined!
public:	       		      	      
  Foo() {  			      
    _ary = new int[10]; 	      
    for (int i = 0; i<10; ++i) _ary[i] = -i;
  }	   		   	      	    
  int Get(int index) { return _ary[index]; }   	      
  ~Foo() { delete [] _ary; }   	       	      	      
private:       		     f 	       	       
  int * _ary; 	      	     +---------+       
};     	       	      	     |_ary:  ---\      
       	       	       	     +---------+|      
#include <iostream.h> 		       	V      
int main() {   	       	       	       +------+	       +------+
  Foo f;       	   		       |  ?   |	       |  0   |
  { Foo g; g = f; }    	   	       |  ?   |	       | -1   |
> cout << f.Get(1) << endl;	       |  ?   |	       | -2   |
  return 0;  			       |  ?   |	       | -3   |
}	     			       |...   |	       |...   |
				       |  ?   |	       | -8   |
				       |  ?   |	       | -9   |
				       +------+	       +------+
POINTERS TO DYNAMIC ARRAYS - IMPORTANCE OF VALUE SEMANTICS
 What does this program print?
class Foo {  // WARNING: No copy ctor or op= defined!
public:	       		      	      
  Foo() {  			      
    _ary = new int[10]; 	      
    for (int i = 0; i<10; ++i) _ary[i] = -i;
  }	   		   	      	    
  int Get(int index) { return _ary[index]; }   	      
  ~Foo() { delete [] _ary; }  ^^^^^^^^^^^     	      
private:       		     f 	       	       
  int * _ary; 	      	     +---------+       
};     	       	      	     |_ary:  ---\      
       	       	       	     +---------+|      
#include <iostream.h> 		       	V      
int main() {   	       	       	       +------+	       +------+
  Foo f;       	   		       |  ?   |	       |  0   |
  { Foo g; g = f; }    	       	_ary[1]|  ?   |	       | -1   |
> cout << f.Get(1) << endl;    	       |  ?   |	       | -2   |
  return 0;  			       |  ?   |	       | -3   |
}	     			       |...   |	       |...   |
(print random garbage from _ary[1],    |  ?   |	       | -8   |
 e.g.,  1075185072 ) 	       	       |  ?   |	       | -9   |
				       +------+	       +------+
POINTERS TO DYNAMIC ARRAYS - IMPORTANCE OF VALUE SEMANTICS
 What does this program print?
class Foo {  // WARNING: No copy ctor or op= defined!
public:	       		      	      
  Foo() {  			      
    _ary = new int[10]; 	      
    for (int i = 0; i<10; ++i) _ary[i] = -i;
  }	   		   	      	    
  int Get(int index) { return _ary[index]; }   	      
  ~Foo() { delete [] _ary; }  
private:       		     f 	       	       
  int * _ary; 	      	     +---------+       
};     	       	      	     |_ary:  ---\      
       	       	       	     +---------+|      
#include <iostream.h> 		       	V      
int main() {   	       	       	       +------+	       +------+
  Foo f;       	   		       |  ?   |	       |  0   |
  { Foo g; g = f; }    	       	       |1075..|	       | -1   |
  cout << f.Get(1) << endl;    	       |  ?   |	       | -2   |
  return 0;  			       |  ?   |	       | -3   |
}<-dtor called here		       |...   |	       |...   |
 				       |  ?   |	       | -8   |
1075185072     	       	       	       |  ?   |	       | -9   |
				       +------+	       +------+
POINTERS TO DYNAMIC ARRAYS - IMPORTANCE OF VALUE SEMANTICS
 What does this program print?
class Foo {  // WARNING: No copy ctor or op= defined!
public:	       		      	      
  Foo() {  			      
    _ary = new int[10]; 	      
    for (int i = 0; i<10; ++i) _ary[i] = -i;
  }	   		   	      	    
  int Get(int index) { return _ary[index]; }   	      
  ~Foo() { delete [] _ary; }<- delete called on already deleted
private:   ^^^^^^^^^^^^^^^^  f 	       	  memory!  Anything could
  int * _ary; 	      	     +---------+  happen!      	       	 
};     	       	      	     |_ary:  ---\      	 
       	       	       	     +---------+|      	 
#include <iostream.h> 		       	V      	 
int main() {   	       	       	       +------+	       +------+
  Foo f;       	   		       |  ?   |	       |  0   |
  { Foo g; g = f; }    	       	       |  ?   |	       | -1   |
  cout << f.Get(1) << endl;    	       |  ?   |	       | -2   |
  return 0;  			       |  ?   |	       | -3   |
}<-dtor called here		       |  ?   |	       |...   |
 				       |  ?   |	       | -8   |
1075185072     	       	       	       |  ?   |	       | -9   |
				       +------+	       +------+
POINTERS TO DYNAMIC ARRAYS - IMPORTANCE OF VALUE SEMANTICS
 What does this program print?
class Foo {  // WARNING: No copy ctor or op= defined!
public:	       		      	      
  Foo() {  			      
    _ary = new int[10]; 	      
    for (int i = 0; i<10; ++i) _ary[i] = -i;
  }    	       	       	       	      	    
  int Get(int index) { return _ary[index]; }   	      
  ~Foo() { delete [] _ary; }	      
private:   			      
  int * _ary; 	      	    	      
};     	       	      	    	      
       	       	       	    	      
#include <iostream.h> 	    	      
int main() {   	       	                       	       +------+
  Foo f;       	   		       (this poor sap->|  0   |
  { Foo g; g = f; }    	       	        doesn't get    | -1   |
  cout << f.Get(1) << endl;    	        reclaimed until| -2   |
  return 0;  			        the whole      | -3   |
}                    		        program dies   |...   |
 				        and the        | -8   |
1075185072     	       	       	        operating      | -9   |
				        system cleans up)-----+
POINTERS TO DYNAMIC ARRAYS - DEEP AND SHALLOW COPYING
   
 - Value semantics for objects is important (in many classes)
   because programmers using the class will expect it.
   
 - For value semantics, copies of objects must not (in effect)
   share any data.  					      
   		  
 - Compiler-generated copy ctor and op= just copy pointer
   data members; they do NOT copy what the pointers are	 
   pointing at.  				       

 - Copying the pointer:  SHALLOW COPYING

 - Copying what the pointer points at:  DEEP COPYING

 - Value semantics (generally) requires deep copying.







POINTERS TO DYNAMIC ARRAYS - EXAMPLE 3
class Foo {    
public:	       
  Foo(int size);      
  Foo(const Foo &);    	       	
  Foo & operator=(const Foo &);	
  ~Foo();                       
  int Get(int index);
private:       
  int _size;
  int * _nums;
};
       	





	     				     





POINTERS TO DYNAMIC ARRAYS - EXAMPLE 3
class Foo {    
public:	       
  Foo(int size);      
  Foo(const Foo &);    	       	
  Foo & operator=(const Foo &);	
  ~Foo();                       
  int Get(int index);
private:       
  int _size;
  int * _nums;
};
       	
Foo::Foo(int size) {
  _size = size;	    
  _nums = new int[_size];
  for (int i = 0; i<_size; ++i) _nums[i] = 0;
}	     				     
	     				     





POINTERS TO DYNAMIC ARRAYS - EXAMPLE 3
class Foo {    
public:	       
  Foo(int size=1);             // optional size! defaults to 1!
  Foo(const Foo &);    	       	
  Foo & operator=(const Foo &);	
  ~Foo();                       
  int Get(int index);
private:       
  int _size;
  int * _nums;
};
       	
Foo::Foo(int size) {   // so this also works as default ctor!
  _size = size;	    
  _nums = new int[_size];
  for (int i = 0; i<_size; ++i) _nums[i] = 0;
}	     				     
	     				     





POINTERS TO DYNAMIC ARRAYS - EXAMPLE 3
class Foo {    
public:	       
  Foo(int size=1);
  Foo(const Foo &);    	       	
  Foo & operator=(const Foo &);	
  ~Foo();                       
  int Get(int index);
private:       
  int _size;
  int * _nums;
};
       	
Foo::Foo(int size) {
  _size = size;	    
  _nums = new int[_size];
  for (int i = 0; i<_size; ++i) _nums[i] = 0;
}	     				     
	     				     
Foo::Foo(const Foo & f) {		     
  _size = f._size;
  _nums = new int[_size];
  for (int i = 0; i<_size; ++i) _nums[i] = f._nums[i];
}
POINTERS TO DYNAMIC ARRAYS - EXAMPLE 3
class Foo {    
public:	       
  Foo(int size=1); 
  Foo(const Foo &);    	       	
  Foo & operator=(const Foo &);	
  ~Foo();                       
  int Get(int index);
private:       
  int _size;
  int * _nums;
};
Foo::Foo(const Foo & f) {		     
  _size = f._size;
  _nums = new int[_size];
  for (int i = 0; i<_size; ++i) _nums[i] = f._nums[i];
}						      







POINTERS TO DYNAMIC ARRAYS - EXAMPLE 3
class Foo {    
public:	       
  Foo(int size=1);
  Foo(const Foo &);    	       	
  Foo & operator=(const Foo &);	
  ~Foo();                       
  int Get(int index);
private:       
  int _size;
  int * _nums;
};
Foo::Foo(const Foo & f) {		     
  _size = f._size;
  _nums = new int[_size];
  for (int i = 0; i<_size; ++i) _nums[i] = f._nums[i];
}						      
Foo & Foo::operator=(const Foo & f) {		      
  if (this==&f) return * this;        // avoid self-assignment
  delete [] _nums;                    // Discard our old array
  _size = f._size;                    // update our size
  _nums = new int[_size];             // Get new array
  for (int i = 0; i<_size; ++i) _nums[i] = f._nums[i]; // Copy
  return *this; }                     // Done
POINTERS TO DYNAMIC ARRAYS - EXAMPLE 3
class Foo {    
public:	       
  Foo(int size=1); 
  Foo(const Foo &);    	       	
  Foo & operator=(const Foo &);	
  ~Foo();                       
  int Get(int index);
private:       
  int _size;
  int * _nums;
};
Foo & Foo::operator=(const Foo & f) {		      
  if (this==&f) return * this;        // avoid self-assignment
  delete [] _nums;                    // Discard our old array
  _size = f._size;                    // update our size
  _nums = new int[_size];             // Get new array
  for (int i = 0; i<_size; ++i) _nums[i] = f._nums[i]; // Copy
  return *this;                       // Done
}




POINTERS TO DYNAMIC ARRAYS - EXAMPLE 3
class Foo {    
public:	       
  Foo(int size=1);  
  Foo(const Foo &);    	       	
  Foo & operator=(const Foo &);	
  ~Foo();                       
  int Get(int index);
private:       
  int _size;
  int * _nums;
};
Foo & Foo::operator=(const Foo & f) {		      
  if (this==&f) return * this;        // avoid self-assignment
  delete [] _nums;                    // Discard our old array
  _size = f._size;                    // update our size
  _nums = new int[_size];             // Get new array
  for (int i = 0; i<_size; ++i) _nums[i] = f._nums[i]; // Copy
  return *this;                       // Done
}
Foo::~Foo() { delete [] _nums; }      



POINTERS TO DYNAMIC ARRAYS - EXAMPLE 3
class Foo {    
public:	       
  Foo(int size=1);   
  Foo(const Foo &);    	       	
  Foo & operator=(const Foo &);	
  ~Foo();                       
  int Get(int index);
private:       
  int _size;
  int * _nums;
};
Foo & Foo::operator=(const Foo & f) {		      
  if (this==&f) return * this;        // avoid self-assignment
  delete [] _nums;                    // Discard our old array
  _size = f._size;                    // update our size
  _nums = new int[_size];             // Get new array
  for (int i = 0; i<_size; ++i) _nums[i] = f._nums[i]; // Copy
  return *this;                       // Done
}
Foo::~Foo() { delete [] _nums; }      

int Foo::Get(int index) {return _nums[index];} // no error check:(

